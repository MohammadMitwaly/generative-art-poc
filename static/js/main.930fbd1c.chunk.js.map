{"version":3,"sources":["components/ImageSketch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImageSketch","props","img","canvas","history","useHistory","useState","undefined","image","setImage","p5Instance","setP5Instance","imageLocalURL","imageUrl","setImageUrl","style","width","height","onClick","push","position","top","border","borderRadius","backgroundColor","color","fontWeight","fontFamily","save","length","result","characters","charactersLength","i","charAt","Math","floor","random","makeid","setup","p5","canvasParentRef","createCanvas","canvasX","windowWidth","canvasY","windowHeight","column","row","xCoord","yCoord","pixel","get","translate","noFill","stroke","strokeWeight","curve","sin","cos","pop","draw","preload","loadImage","process","exact","to","withStyles","input","url","setUrl","onDrop","files","pictures","a","imageFile","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","reader","FileReader","addEventListener","readAsDataURL","console","log","useEffect","className","Grid","container","minHeight","path","render","item","margin","withIcon","buttonText","onChange","imgExtension","maxFileSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.930fbd1c.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState } from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport p5Types from \"p5\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\nimport \"../App.css\";\r\n\r\ninterface ImageSketchProps {\r\n  imageLocalURL: string;\r\n  setImageUrl: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nconst ImageSketch: React.FC<ImageSketchProps> = (props: ImageSketchProps) => {\r\n  const history = useHistory();\r\n  const [image, setImage] = useState<undefined | p5Types.Renderer>(undefined);\r\n  const [p5Instance, setP5Instance] = useState<undefined | p5Types>();\r\n  let img: p5Types.Image;\r\n  let canvas;\r\n  const [imageUrl, setImageUrl] = useState(props.imageLocalURL);\r\n\r\n  const makeid = (length: number) => {\r\n    var result = \"\";\r\n    var characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const preload = (p5: p5Types) => {\r\n    img = imageUrl\r\n      ? p5.loadImage(imageUrl)\r\n      : p5.loadImage(`${process.env.PUBLIC_URL}/Monkey.jpg`);\r\n  };\r\n\r\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n    if (img) {\r\n      canvas = p5.createCanvas(img.width, img.height);\r\n      let canvasX = (p5.windowWidth - img.width) / 2;\r\n      let canvasY = (p5.windowHeight - img.height) / 2;\r\n      canvas.position(canvasX, canvasY);\r\n\r\n      for (let column = 0; column < img.width; column += 2) {\r\n        for (let row = 0; row < img.height; row += 2) {\r\n          let xCoord = column;\r\n          let yCoord = row;\r\n          let pixel = img.get(xCoord, yCoord);\r\n          p5.push();\r\n          p5.translate(xCoord, yCoord);\r\n          p5.noFill();\r\n          p5.stroke(p5.color(pixel));\r\n          p5.strokeWeight(p5.random(5));\r\n          p5.curve(\r\n            xCoord,\r\n            yCoord,\r\n            p5.sin(xCoord) * p5.random(60),\r\n            p5.cos(xCoord) * p5.sin(xCoord) * p5.random(90),\r\n            p5.random(10),\r\n            p5.random(80),\r\n            p5.cos(yCoord) * p5.sin(yCoord) * p5.random(140),\r\n            p5.cos(yCoord) * p5.sin(yCoord) * 50\r\n          );\r\n          p5.pop();\r\n        }\r\n      }\r\n      setImage(canvas);\r\n      setP5Instance(p5);\r\n    }\r\n  };\r\n\r\n  const draw = (p5: p5Types) => {};\r\n  return imageUrl ? (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <div>\r\n        <button\r\n          onClick={() => {\r\n            props.setImageUrl(\"\");\r\n            setImageUrl(\"\");\r\n            history.push(\"/generative-art-poc\");\r\n          }}\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"20px\",\r\n            border: \"none\",\r\n            height: \"30px\",\r\n            borderRadius: \"8%\",\r\n            backgroundColor: \"rgb(242, 235, 235)\",\r\n            color: \"hsl(0, 1%, 18%)\",\r\n            fontWeight: \"bold\",\r\n            fontFamily: \"Roboto\",\r\n          }}\r\n        >\r\n          Reset Sketch\r\n        </button>\r\n        <button\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"55px\",\r\n            height: \"30px\",\r\n            borderRadius: \"8%\",\r\n            border: \"none\",\r\n            backgroundColor: \"rgb(242, 235, 235)\",\r\n            color: \"hsl(0, 1%, 18%)\",\r\n            fontWeight: \"bold\",\r\n            fontFamily: \"Roboto\",\r\n          }}\r\n          onClick={() => {\r\n            p5Instance && p5Instance.save(image, `${makeid(8)}.png`);\r\n          }}\r\n        >\r\n          Save image\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <Sketch setup={setup} draw={draw} preload={preload} />\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <Redirect exact to=\"/generative-art-poc\" />\r\n  );\r\n};\r\n\r\nexport default ImageSketch;\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport ImageSketch from \"./components/ImageSketch\";\nimport { Grid, withStyles } from \"@material-ui/core\";\nimport ImageUploader from \"react-images-upload\";\nimport { Switch, Route, useHistory, Redirect } from \"react-router-dom\";\nimport imageCompression from \"browser-image-compression\";\n\nconst styles = {\n  input: {\n    color: \"white\",\n    width: \"110%\",\n  },\n};\n\nconst App = () => {\n  const [url, setUrl] = useState(\"\");\n  const history = useHistory();\n  const onDrop = async (files: File[], pictures: string[]) => {\n    const imageFile = files[0];\n    const options = {\n      maxSizeMB: 0.5,\n      maxWidthOrHeight: 960,\n      useWebWorker: true,\n    };\n    try {\n      const compressedFile = await imageCompression(imageFile, options);\n      const reader = new FileReader();\n      reader.addEventListener(\n        \"load\",\n        function () {\n          // convert image file to base64 string\n          setUrl(reader.result as string);\n        },\n        false\n      );\n\n      if (compressedFile) {\n        reader.readAsDataURL(compressedFile);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (url) {\n      history.push(\"/sketch\");\n    }\n  }, [url, history]);\n\n  return (\n    <div className=\"App\">\n      <Grid container style={{ minHeight: \"15vh\" }}>\n        <Switch>\n          <Route\n            exact\n            path=\"/generative-art-poc\"\n            render={() => {\n              return (\n                <Grid item style={{ margin: \"10px\", width: \"100%\" }}>\n                  <ImageUploader\n                    withIcon={true}\n                    buttonText=\"Choose an image\"\n                    onChange={onDrop}\n                    imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\n                    maxFileSize={5242880}\n                  />\n                </Grid>\n              );\n            }}\n          ></Route>\n          <Route exact path=\"/\">\n            <Redirect to=\"/generative-art-poc\" />\n          </Route>\n          <Route\n            path=\"/sketch\"\n            render={() => {\n              return (\n                <Grid item style={{ margin: \"10px\", width: \"100%\" }}>\n                  <ImageSketch imageLocalURL={url} setImageUrl={setUrl} />\n                </Grid>\n              );\n            }}\n          ></Route>\n        </Switch>\n      </Grid>\n      <br />\n    </div>\n  );\n};\n\nexport default withStyles(styles)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}