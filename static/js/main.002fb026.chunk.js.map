{"version":3,"sources":["components/ImageSketch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImageSketch","props","img","canvas","history","useHistory","useState","imageLocalURL","imageUrl","setImageUrl","console","log","style","width","height","setup","p5","canvasParentRef","createCanvas","canvasX","windowWidth","canvasY","windowHeight","position","column","row","xCoord","yCoord","pixel","get","push","translate","noFill","stroke","color","strokeWeight","random","curve","sin","cos","pop","draw","preload","loadImage","process","onClick","exact","to","withStyles","input","url","setUrl","onDrop","files","pictures","a","imageFile","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","reader","FileReader","addEventListener","result","readAsDataURL","useEffect","className","Grid","container","minHeight","path","render","item","margin","withIcon","buttonText","onChange","imgExtension","maxFileSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.002fb026.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState } from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport p5Types from \"p5\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\n\r\ninterface ImageSketchProps {\r\n  imageLocalURL: string;\r\n  setImageUrl: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nconst ImageSketch: React.FC<ImageSketchProps> = (props: ImageSketchProps) => {\r\n  const history = useHistory();\r\n  let img: p5Types.Image;\r\n  let canvas;\r\n  const [imageUrl, setImageUrl] = useState(props.imageLocalURL);\r\n  console.log(imageUrl);\r\n  const preload = (p5: p5Types) => {\r\n    img = imageUrl\r\n      ? p5.loadImage(imageUrl)\r\n      : p5.loadImage(`${process.env.PUBLIC_URL}/Monkey.jpg`);\r\n  };\r\n\r\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n    if (img) {\r\n      canvas = p5.createCanvas(img.width, img.height);\r\n      let canvasX = (p5.windowWidth - img.width) / 2;\r\n      let canvasY = (p5.windowHeight - img.height) / 2;\r\n      canvas.position(canvasX, canvasY);\r\n\r\n      for (let column = 0; column < img.width; column += 2) {\r\n        for (let row = 0; row < img.height; row += 2) {\r\n          let xCoord = column;\r\n          let yCoord = row;\r\n          let pixel = img.get(xCoord, yCoord);\r\n          p5.push();\r\n          p5.translate(xCoord, yCoord);\r\n          p5.noFill();\r\n          p5.stroke(p5.color(pixel));\r\n          p5.strokeWeight(p5.random(5));\r\n          p5.curve(\r\n            xCoord,\r\n            yCoord,\r\n            p5.sin(xCoord) * p5.random(60),\r\n            p5.cos(xCoord) * p5.sin(xCoord) * p5.random(90),\r\n            p5.random(10),\r\n            p5.random(80),\r\n            p5.cos(yCoord) * p5.sin(yCoord) * p5.random(140),\r\n            p5.cos(yCoord) * p5.sin(yCoord) * 50\r\n          );\r\n          p5.pop();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const draw = (p5: p5Types) => {};\r\n  console.log(\"We are here\");\r\n\r\n  return imageUrl ? (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <Sketch setup={setup} draw={draw} preload={preload} />\r\n      <button\r\n        onClick={() => {\r\n          props.setImageUrl(\"\");\r\n          setImageUrl(\"\");\r\n          history.push(\"/\");\r\n        }}\r\n      >\r\n        Reset\r\n      </button>\r\n    </div>\r\n  ) : (\r\n    <Redirect exact to=\"/\" />\r\n  );\r\n};\r\n\r\nexport default ImageSketch;\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport ImageSketch from \"./components/ImageSketch\";\nimport { Grid, withStyles } from \"@material-ui/core\";\nimport ImageUploader from \"react-images-upload\";\nimport { Switch, Route, useHistory, Redirect } from \"react-router-dom\";\nimport imageCompression from \"browser-image-compression\";\n\nconst styles = {\n  input: {\n    color: \"white\",\n    width: \"110%\",\n  },\n};\n\nconst App = () => {\n  const [url, setUrl] = useState(\"\");\n  const history = useHistory();\n  const onDrop = async (files: File[], pictures: string[]) => {\n    const imageFile = files[0];\n    const options = {\n      maxSizeMB: 0.5,\n      maxWidthOrHeight: 960,\n      useWebWorker: true,\n    };\n    try {\n      const compressedFile = await imageCompression(imageFile, options);\n      const reader = new FileReader();\n      reader.addEventListener(\n        \"load\",\n        function () {\n          // convert image file to base64 string\n          setUrl(reader.result as string);\n        },\n        false\n      );\n\n      if (compressedFile) {\n        reader.readAsDataURL(compressedFile);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (url) {\n      history.push(\"/sketch\");\n    }\n  }, [url, history]);\n\n  return (\n    <div className=\"App\">\n      <Grid container style={{ minHeight: \"15vh\" }}>\n        <Switch>\n          <Route\n            exact\n            path=\"/generative-art-poc\"\n            render={() => {\n              return (\n                <Grid item style={{ margin: \"10px\", width: \"100%\" }}>\n                  <ImageUploader\n                    withIcon={true}\n                    buttonText=\"Choose an image\"\n                    onChange={onDrop}\n                    imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\n                    maxFileSize={5242880}\n                  />\n                </Grid>\n              );\n            }}\n          ></Route>\n          <Route exact path=\"/\">\n            <Redirect to=\"/generative-art-poc\" />\n          </Route>\n          <Route\n            path=\"/sketch\"\n            render={() => {\n              return (\n                <Grid item style={{ margin: \"10px\", width: \"100%\" }}>\n                  <ImageSketch imageLocalURL={url} setImageUrl={setUrl} />\n                </Grid>\n              );\n            }}\n          ></Route>\n        </Switch>\n      </Grid>\n      <br />\n    </div>\n  );\n};\n\nexport default withStyles(styles)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}