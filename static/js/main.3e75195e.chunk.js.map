{"version":3,"sources":["components/ImageSketch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImageSketch","props","img","canvas","history","useHistory","useState","imageLocalURL","imageUrl","setImageUrl","style","width","height","onClick","push","position","top","borderRadius","backgroundColor","color","fontWeight","fontFamily","setup","p5","canvasParentRef","createCanvas","canvasX","windowWidth","canvasY","windowHeight","column","row","xCoord","yCoord","pixel","get","translate","noFill","stroke","strokeWeight","random","curve","sin","cos","pop","draw","preload","loadImage","process","exact","to","withStyles","input","url","setUrl","onDrop","files","pictures","a","imageFile","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","reader","FileReader","addEventListener","result","readAsDataURL","console","log","useEffect","className","Grid","container","minHeight","path","render","item","margin","withIcon","buttonText","onChange","imgExtension","maxFileSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e75195e.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction, useState } from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport p5Types from \"p5\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\n\r\ninterface ImageSketchProps {\r\n  imageLocalURL: string;\r\n  setImageUrl: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nconst ImageSketch: React.FC<ImageSketchProps> = (props: ImageSketchProps) => {\r\n  const history = useHistory();\r\n  let img: p5Types.Image;\r\n  let canvas;\r\n  const [imageUrl, setImageUrl] = useState(props.imageLocalURL);\r\n  const preload = (p5: p5Types) => {\r\n    img = imageUrl\r\n      ? p5.loadImage(imageUrl)\r\n      : p5.loadImage(`${process.env.PUBLIC_URL}/Monkey.jpg`);\r\n  };\r\n\r\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n    if (img) {\r\n      canvas = p5.createCanvas(img.width, img.height);\r\n      let canvasX = (p5.windowWidth - img.width) / 2;\r\n      let canvasY = (p5.windowHeight - img.height) / 2;\r\n      canvas.position(canvasX, canvasY);\r\n\r\n      for (let column = 0; column < img.width; column += 2) {\r\n        for (let row = 0; row < img.height; row += 2) {\r\n          let xCoord = column;\r\n          let yCoord = row;\r\n          let pixel = img.get(xCoord, yCoord);\r\n          p5.push();\r\n          p5.translate(xCoord, yCoord);\r\n          p5.noFill();\r\n          p5.stroke(p5.color(pixel));\r\n          p5.strokeWeight(p5.random(5));\r\n          p5.curve(\r\n            xCoord,\r\n            yCoord,\r\n            p5.sin(xCoord) * p5.random(60),\r\n            p5.cos(xCoord) * p5.sin(xCoord) * p5.random(90),\r\n            p5.random(10),\r\n            p5.random(80),\r\n            p5.cos(yCoord) * p5.sin(yCoord) * p5.random(140),\r\n            p5.cos(yCoord) * p5.sin(yCoord) * 50\r\n          );\r\n          p5.pop();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const draw = (p5: p5Types) => {};\r\n  return imageUrl ? (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <button\r\n        onClick={() => {\r\n          props.setImageUrl(\"\");\r\n          setImageUrl(\"\");\r\n          history.push(\"/generative-art-poc\");\r\n        }}\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"20px\",\r\n          height: \"30px\",\r\n          borderRadius: \"8%\",\r\n          backgroundColor: \"rgb(242, 235, 235)\",\r\n          color: \"hsl(0, 1%, 18%)\",\r\n          fontWeight: \"bold\",\r\n          fontFamily: \"Roboto\",\r\n        }}\r\n      >\r\n        Reset Sketch\r\n      </button>\r\n      <Sketch setup={setup} draw={draw} preload={preload} />\r\n    </div>\r\n  ) : (\r\n    <Redirect exact to=\"/generative-art-poc\" />\r\n  );\r\n};\r\n\r\nexport default ImageSketch;\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport ImageSketch from \"./components/ImageSketch\";\nimport { Grid, withStyles } from \"@material-ui/core\";\nimport ImageUploader from \"react-images-upload\";\nimport { Switch, Route, useHistory, Redirect } from \"react-router-dom\";\nimport imageCompression from \"browser-image-compression\";\n\nconst styles = {\n  input: {\n    color: \"white\",\n    width: \"110%\",\n  },\n};\n\nconst App = () => {\n  const [url, setUrl] = useState(\"\");\n  const history = useHistory();\n  const onDrop = async (files: File[], pictures: string[]) => {\n    const imageFile = files[0];\n    const options = {\n      maxSizeMB: 0.5,\n      maxWidthOrHeight: 960,\n      useWebWorker: true,\n    };\n    try {\n      const compressedFile = await imageCompression(imageFile, options);\n      const reader = new FileReader();\n      reader.addEventListener(\n        \"load\",\n        function () {\n          // convert image file to base64 string\n          setUrl(reader.result as string);\n        },\n        false\n      );\n\n      if (compressedFile) {\n        reader.readAsDataURL(compressedFile);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (url) {\n      history.push(\"/sketch\");\n    }\n  }, [url, history]);\n\n  return (\n    <div className=\"App\">\n      <Grid container style={{ minHeight: \"15vh\" }}>\n        <Switch>\n          <Route\n            exact\n            path=\"/generative-art-poc\"\n            render={() => {\n              return (\n                <Grid item style={{ margin: \"10px\", width: \"100%\" }}>\n                  <ImageUploader\n                    withIcon={true}\n                    buttonText=\"Choose an image\"\n                    onChange={onDrop}\n                    imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\n                    maxFileSize={5242880}\n                  />\n                </Grid>\n              );\n            }}\n          ></Route>\n          <Route exact path=\"/\">\n            <Redirect to=\"/generative-art-poc\" />\n          </Route>\n          <Route\n            path=\"/sketch\"\n            render={() => {\n              return (\n                <Grid item style={{ margin: \"10px\", width: \"100%\" }}>\n                  <ImageSketch imageLocalURL={url} setImageUrl={setUrl} />\n                </Grid>\n              );\n            }}\n          ></Route>\n        </Switch>\n      </Grid>\n      <br />\n    </div>\n  );\n};\n\nexport default withStyles(styles)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}